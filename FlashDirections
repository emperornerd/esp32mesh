# A live version of this flasher is available, here: https://fuckups.net/mesh/index.html

These instructions cover three ways to load firmware onto your ESP32 Protest Node:

the online Web Flasher,

downloading and flashing BIN files with Arduino IDE,

flashing downloaded BINs via esptool.py.

They also explain ESP32 bootloader nuances and recovery steps.

1. Web Flasher (Online)

1.1 Access the Tool
Open your browser and navigate to the flasher URL.
# You can use this one if you like: https://fuckups.net/mesh/index.html

The page will display your browser, platform, secure‐context and Web Serial API status.

1.2 Choose Flash Mode
Compatibility Mode

Uses the built-in default PSK.

Click Download Unmodified Firmware if you want a .bin file for manual flashing.

Secure Mode

Generates a session-unique PSK, patches the binary in-browser, and updates the manifest.

Wait for the console log to show “✅ Secure firmware … ready,” then click Download Patched Secure Firmware (optional; you can flash directly).

1.3 Flash via Web Serial
Click the Flash Firmware button.

In the serial-port chooser, select your ESP32’s port (COMx or /dev/ttyUSBx).

The console panel shows state changes:

When you see PREPARING or UPLOADING, the tool toggles DTR/RTS to reset and enter bootloader.

If upload stalls, use the manual boot procedure below.

On FINISHED, press RESET on your ESP32 to start the new firmware.

On ERROR, review the console log and follow the manual-boot guidance.

2. Manual BIN Download & Arduino IDE
If you prefer Arduino IDE or have large fleets to script, download the BIN and use your favorite toolchain.

2.1 Download the BIN File
Compatibility Mode: unmodified_firmware.bin

Secure Mode: secure_firmware_<last6charsOfPSK>.bin

2.2 Flash with Arduino IDE
Install ESP32 by Espressif Systems via Boards Manager.

Open the Protest Node sketch (ProtestNode.ino) from this repo.

Select Tools → Board → ESP32 Dev Module.

Select the correct Port.

Click Upload.

The IDE compiles and invokes esptool.py under the hood.

If it hangs, enter manual boot mode (see below).

After upload completes, press RESET on the board.

3. Command-Line Flashing with esptool.py
Ideal for scripting or CI builds.

Install Python package:

bash
pip install esptool
Plug in your ESP32 and identify its port (e.g. COM3 or /dev/ttyUSB0).

Run:

bash
esptool.py --chip esp32 \
  --port /dev/ttyUSB0 \
  --baud 460800 \
  write_flash -z \
  0x1000 path/to/your_firmware.bin
When done, press RESET on the ESP32.

4. ESP32 Bootloader & Boot Modes
ESP32 boards enter the on-chip ROM bootloader when GPIO0 (BOOT) is held LOW during reset. Most dev boards wire in two buttons:

EN (RESET): Resets the chip.

BOOT (GPIO0): When held down during EN press, enters bootloader mode.

4.1 Automatic Reset (Web Flasher / Arduino IDE)
Tools toggle DTR/RTS signals to pulse EN and BOOT for you.

If CTS/RTS wiring differs or the USB-serial adapter lacks control lines, the automatic entry may fail.

4.2 Manual Boot-Mode Entry
Unplug USB or disconnect power.

Press and hold BOOT (GPIO0) button.

While holding BOOT, press and release EN (RESET).

Release BOOT.

The red LED may blink slowly—ESP32 is now in bootloader mode.

Run your flash command or click Flash Firmware again.

4.3 Common Recovery Tips
Ensure a high-quality, data-capable USB cable.

Close other serial-monitor applications.

If you see garbage output, verify baud rate (115200 for console, 460800 or 921600 for flashing).

On clone boards, try slower baud rates (e.g. 115200).

Verify drivers (Windows → CP210x / CH340 / FTDI).
